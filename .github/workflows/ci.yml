name: CI/CD Pipeline

on:
  push:
    branches: [ 'main', 'develop', 'feature/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3 libsqlite3-dev

    - name: Create data directory
      run: mkdir -p data/images data/pdfs

    - name: Build
      run: go build -v ./...
      env:
        DATA_DIR: ./data

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      env:
        DATA_DIR: ./data

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        fail_ci_if_error: false

  docker:
    runs-on: ubuntu-latest
    needs: build
    # Only run on main branch pushes or tag pushes (not PRs)
    if: >
      github.event_name == 'push' &&  (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for proper versioning

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract version from tag or generate one from commit
    - name: Set version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          # For tags, use the tag name without the 'v' prefix
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from tag: $VERSION"
        else
          # For non-tag pushes, use a development version with commit SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          VERSION="dev-$SHORT_SHA"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using development version: $VERSION"
        fi

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          type=semver,pattern={{version}},value=${{ env.VERSION }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=semver,pattern={{major}},value=${{ env.VERSION }},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=raw,value=${{ env.VERSION }}
          type=sha,format=short

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        # Add build args if needed
        build-args: |
          VERSION=${{ env.VERSION }}

    # Add a verification step to ensure the image was pushed
    - name: Verify Docker image
      run: |
        echo "Verifying Docker image was pushed successfully..."
        # Wait a moment for the registry to update
        sleep 10
        # Try to pull the image we just pushed
        docker pull ghcr.io/${{ github.repository }}:${{ env.VERSION }}
        echo "Docker image verified successfully!"
